# -*- coding: utf-8 -*-

[general]
#
# Here you can name your instance of pyggi, for example
# 'My git repositories'
#
name = pyggi

#
# The directory where all the git repositories can be found
# that shall be available through the interface. The repository
# can be either a bare repo or not. Note that for non-bare repos
# there is no description of the repository.
#
git_repositories = /home/git/

#
# If this is set to True, only those repositories are available
# through the interface, that are bare and contain a file
# 'git-daemon-export-ok'.
#
# In other words: We only display those repos that are also available
# through the git-daemon.
#
preserve_daemon_export = True

#
# Here you can specify other modules that shall be loaded. The syntax
# is as follows:
#		module = variable
#
# Where variable is the name of a global variable in that module, that
# contains a WSGI compliant application.
#
[modules]
pyggi.repositories.frontend = /
pyggi.base.base = /

#
# configure the various ways to clone a repository. You can specify
# an URL for every protocol that 'git' supports. The special variable
# "%repo%" contains the name of the current repo and will be filled by
# pyggi.
#
[clone]
# examples: uncomment if necessary
#git = git://server.example.com/%repo%
#http = http://server.example.com/%repo%

#
# pyggi allows to cache almost every request, for some specified time.
# with these variables you can configure the caching behaviour of pyggi.
#
# when pyggi runs in debug mode, it will use a simple cache in the
# interpreter memory, otherwise it will use the memcache daemon.
#
# the URIS tells pyggi where to connect to the memcache daemon
[cache]
enabled = True
timeout = 800

# you can provide a comma separated list of valid uris
uris = 127.0.0.1:11211,


#
# pyggi will log most errors and exceptions that occur during normal
# operations in it's own logfile. consult the webservers log for access
# and server errors, they won't be logged in this file
#
[log]
file = /var/log/pyggi.log
